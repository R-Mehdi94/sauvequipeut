searchState.loadedDescShard("common", 0, "Représente les différentes actions qu’un joueur peut …\nDéplace le joueur dans une direction relative.\nReprésente une action effectuée par un joueur.\nRésout un défi en soumettant une réponse sous forme de …\nL’action effectuée par le joueur.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nL’identifiant unique du joueur effectuant l’action.\nReprésente les différentes erreurs pouvant survenir …\nLe joueur tente de passer à travers un autre joueur, ce …\nLe joueur tente de passer à travers un mur, ce qui est …\nLa solution fournie pour le défi est incorrecte.\nLe joueur tente de résoudre un défi alors qu’aucun …\nLe joueur doit d’abord résoudre le défi actuel avant …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReprésente les différents types de défis pouvant être …\nUn défi spécifique appelé <strong>SOS</strong>.\nUn défi où l’objectif est de deviner un nombre secret …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndice sur la taille de la grille utilisée dans le jeu.\nReprésente les différents types d’indices pouvant …\nIndice indiquant une direction sous forme d’un angle en …\nUn indice générique d’aide appelé <strong>SOSHelper</strong>.\nUn indice sous forme d’un nombre secret.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReprésente le résultat de la vue radar d’un joueur.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReprésentation textuelle de la vue radar.\nContient un message d’erreur en cas d’échec de l’…\nContient les détails de l’inscription réussie, si elle …\nReprésente les informations nécessaires pour enregistrer …\nReprésente le résultat d’une tentative d’…\nContient les informations de confirmation lorsqu’une …\nNombre de joueurs attendus pour l’équipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNom de l’équipe à enregistrer.\nJeton unique d’inscription permettant de finaliser l’…\nDirection <strong>derrière</strong> par rapport à l’orientation …\nDirection <strong>devant</strong> par rapport à l’orientation actuelle.\nDirection <strong>gauche</strong> par rapport à l’orientation actuelle.\nReprésente une direction relative par rapport à l’…\nDirection <strong>droite</strong> par rapport à l’orientation actuelle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nL’inscription a échoué avec un message d’erreur …\nL’inscription du joueur a réussi.\nReprésente les informations nécessaires pour inscrire un …\nReprésente le résultat d’une tentative d’inscription …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNom du joueur à inscrire.\nJeton d’inscription unique fourni lors de l’…\nReprésente l’état actuel du client du jeu.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDernière vue radar reçue sous forme de chaîne de …\nListe des joueurs actuellement inscrits.\nInformations sur l’équipe enregistrée, si elle existe.\nErreur d’entrée/sortie (<code>std::io::Error</code>).\nErreur de sérialisation/désérialisation JSON (…\nReprésente une erreur personnalisée pour la gestion des …\nAutre type d’erreur représenté sous forme de texte.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruit un message <code>Message</code> à partir de <code>MessageData</code>.\nGère la réponse du serveur en la recevant et en la …\nTraite un message reçu et met à jour l’état du client.\nReçoit une réponse du serveur et la convertit en <code>Message</code>.\nEnvoie un message au serveur via un <code>TcpStream</code>.")