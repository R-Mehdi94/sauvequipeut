use std::collections::HashMap;
use common::message::relativedirection::RelativeDirection;

/// Suit l'exploration d'un joueur en enregistrant les **positions visit√©es** et les **directions prises**.
///
/// - Permet de d√©tecter des **boucles** si un joueur repasse plusieurs fois par la m√™me position.
/// - Garde en m√©moire les **derni√®res positions** explor√©es.
/// - Stocke la **derni√®re direction emprunt√©e**.
pub struct ExplorationTracker {
    /// Positions visit√©es avec le nombre de fois o√π elles ont √©t√© explor√©es.
    pub(crate) visited_positions: HashMap<(i32, i32), usize>,

    /// Historique des derni√®res positions explor√©es.
    last_positions: Vec<(i32, i32)>,

    /// Derni√®re direction emprunt√©e par le joueur.
    last_direction: Option<RelativeDirection>,
}

impl ExplorationTracker {
    /// Cr√©e une nouvelle instance de `ExplorationTracker` initialis√©e avec des structures vides.
    ///
    /// # Retourne
    /// - Une instance de `ExplorationTracker`.
    ///
    /// # Exemple
    /// ```
    /// use ma_lib::ExplorationTracker;
    ///
    /// let tracker = ExplorationTracker::new();
    /// assert!(tracker.visited_positions.is_empty());
    /// ```
    pub fn new() -> Self {
        Self {
            visited_positions: HashMap::new(),
            last_positions: Vec::new(),
            last_direction: None,
        }
    }

    /// Marque une position comme **visit√©e** et met √† jour l'historique des d√©placements.
    ///
    /// - Incr√©mente le compteur de visites pour cette position.
    /// - Ajoute la position √† l'historique des **derni√®res positions** (limit√© √† 8).
    /// - Stocke la derni√®re direction emprunt√©e.
    /// - D√©tecte si une **boucle** a √©t√© form√©e (le joueur repasse par une position r√©cente).
    ///
    /// # Param√®tres
    /// - `position`: Coordonn√©es `(x, y)` de la position visit√©e.
    /// - `direction`: Direction prise pour arriver √† cette position.
    ///
    /// # Exemple
    /// ```
    /// use ma_lib::ExplorationTracker;
    /// use common::message::relativedirection::RelativeDirection;
    ///
    /// let mut tracker = ExplorationTracker::new();
    /// tracker.mark_position((3, 3), RelativeDirection::Front);
    /// ```
    pub fn mark_position(&mut self, position: (i32, i32), direction: RelativeDirection) {
        let count = self.visited_positions.entry(position).or_insert(0);
        *count += 1;

        println!("üìù [DEBUG] Ajout de la position {:?} avec direction {:?}", position, direction);
        println!("üìå [DEBUG] Avant ajout, last_positions: {:?}", self.last_positions);

        self.last_positions.push(position);
        if self.last_positions.len() > 8 {
            self.last_positions.remove(0);
        }

        self.last_direction = Some(direction);

        if self.last_positions.len() >= 3 && self.last_positions[..self.last_positions.len() - 1].contains(&position) {
            println!("üîÑ [ALERTE] Boucle d√©tect√©e √† {:?}", position);
        }

        println!("üìå [DEBUG] Apr√®s ajout, last_positions: {:?}", self.last_positions);
        println!("‚û°Ô∏è [DEBUG] Derni√®re direction prise : {:?}", self.last_direction);
    }

    /// V√©rifie si une position a √©t√© **r√©cemment visit√©e**.
    ///
    /// - Une position est consid√©r√©e comme r√©cemment visit√©e si elle figure dans l'historique des **derni√®res 5 positions** explor√©es.
    ///
    /// # Param√®tres
    /// - `position`: Coordonn√©es `(x, y)` √† v√©rifier.
    ///
    /// # Retourne
    /// - `true` si la position a √©t√© r√©cemment visit√©e.
    /// - `false` sinon.
    ///
    /// # Exemple
    /// ```
    /// use ma_lib::ExplorationTracker;
    ///
    /// let mut tracker = ExplorationTracker::new();
    /// tracker.mark_position((2, 2), common::message::relativedirection::RelativeDirection::Front);
    /// assert!(tracker.is_recently_visited((2, 2)));
    /// ```
    pub fn is_recently_visited(&self, position: (i32, i32)) -> bool {
        if self.last_positions.len() < 5 {
            return false;
        }
        println!("üîç [DEBUG] V√©rification de la position {} dans is_recently_visited() {}", position.0, position.1);
        self.last_positions[..self.last_positions.len() - 1].contains(&position)
    }
}
